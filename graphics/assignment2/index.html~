<script src=lib1.js></script>

<br>
<br>
<body bgcolor=black>
<center>
<tr><font color="white">Basics: Single Sphere, Single Light Source:</font></tr><br>
<tr><canvas id='canvas1' width=400 height=400></canvas></tr><br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<tr><font color="white">Multiple Spheres, Multiple Light Sources:</font></tr><br>
<tr><canvas id='canvas2' width=400 height=400></canvas></tr><br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<tr><font color="white">Multiple Spheres, Multiple Light Sources, Cursor Iteration:</font></tr><br>
<tr><canvas id='canvas3' width=400 height=400></canvas></tr><br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
</center>
</body>



<script id='my_vertex_shader' type='x-shader/x-vertex'>
   attribute vec3 aPosition;
   varying   vec3 vPosition;
   void main() {
      gl_Position = vec4(aPosition, 1.0);
      vPosition = aPosition;
   }
</script>

<script id='my_fragment_shader' type='x-shader/x-fragment'>

   precision mediump float;
   uniform float uTime;
   uniform vec3  uCursor;
   varying vec3  vPosition;

   vec4 sphere;
   vec3 material;

   vec3 Lrgb;
   vec3 Ldir;

   // Compute intersection of a ray with a sphere, if any.  Return t.
   // If there is no intersection, return 10000.

   float raySphere(vec3 V, vec3 W, vec4 S) {

      // YOU NEED TO COMPUTE t, BY SETTING UP AND THEN SOLVING A QUADRATIC EQUATION.
      float b = 2.*dot(W, (V-S.xyz));
      float c = dot((V-S.xyz),(V-S.xyz)) - pow(S.w, 2.);
      float bac = pow(b,2.) - 4.*c;
      if (bac <0.){
        return 10000.; 
      }
	    float t = (-b + pow(bac,0.5)) / 2.;
      return t;
   }

   // Diffusely shade a sphere.
   //    point is the x,y,z position of the surface point.
   //    sphere is the x,y,z,r definition of the sphere.
   //    material is the r,g,b color of the sphere.

   vec3 shadeSphere(vec3 point, vec4 sphere, vec3 material) {
      vec3 color = vec3(0.,0.,0.);
      vec3 normal = (point - sphere.xyz) / sphere.w;

      // YOU NEED TO COMPUTE COLOR FOR A DIFFUSELY SHADED SPHERE.

      // FOR THE AMBIENT COMPONENT OF THE DIFFUSE SHADING, YOU CAN
      // USE A SIMPLE APPROXIMATION SUCH AS: ambient = material / 5.;
      vec3 ambient = material / 5.;
      vec3 diffuse = vec3(0.4,0.4,0.4);

	    color = ambient + Lrgb * diffuse * max(0., dot(normal, Ldir));
      return color;
   }

   void main(void) {
      vec2 c = uCursor.xy;

      Lrgb = vec3(0.5,0.5,0.5);
      Ldir = normalize(vec3(c.x, c.y, 1. - 2. * dot(c, c)));
      
      // YOU NEED TO COMPUTE V AND W TO CREATE THE RAY FOR THIS PIXEL,
      // USING vPosition.x AND vPosition.y.
 
      vec3 V, W;
      float f = -5.10;
      W = normalize( vec3(vPosition.x, vPosition.y, -f) );
      V = vec3(0.,0.,0.);
      // YOU NEED TO SET x,y,z AND r FOR sphere.
      sphere = vec4(.0,.0,2.5,.3); //vec4(x,y,z,r)

      // YOU NEED TO SET r,g,b FOR material.
      material = vec3(0.5,0.5,0.25);
      vec3 color = vec3(0., 0., 0.);
      float t = raySphere(V, W, sphere);
      if (t < 10000.)
         color = shadeSphere(V + t * W, sphere, material);
      gl_FragColor = vec4(sqrt(color), 1.); // Do Gamma correction.
   }
</script>



<script id='my_vertex_shader2' type='x-shader/x-vertex'>
   attribute vec3 aPosition;
   varying   vec3 vPosition;
   void main() {
      gl_Position = vec4(aPosition, 1.0);
      vPosition = aPosition;
   }
</script>

<script id='my_fragment_shader2' type='x-shader/x-fragment'>

   precision mediump float;
   uniform float uTime;
   uniform vec3  uCursor;
   varying vec3  vPosition;

   vec4 sphere;
   vec3 material;
   float rand;
   vec3 Lrgb[3];
   vec3 Ldir[3];

   // Compute intersection of a ray with a sphere, if any.  Return t.
   // If there is no intersection, return 10000.

   float raySphere(vec3 V, vec3 W, vec4 S) {

      float b = 2.*dot(W, (V-S.xyz));
      float c = dot((V-S.xyz),(V-S.xyz)) - pow(S.w, 2.);
      float bac = pow(b,2.) - 4.*c;
      if (bac <0.){
        return 10000.; 
      }
	    float t = (-b + pow(bac,0.5)) / 2.;
      return t;
   }

   // Diffusely shade a sphere.
   //    point is the x,y,z position of the surface point.
   //    sphere is the x,y,z,r definition of the sphere.
   //    material is the r,g,b color of the sphere.

   vec3 shadeSphere(vec3 point, vec4 sphere, vec3 material) {
      vec3 color = vec3(0.,0.,0.);
      vec3 normal = (point - sphere.xyz) / sphere.w;
      vec3 ambient = material / 5.;
      vec3 diffuse = vec3(0.4,0.4,0.4);
      vec3 lightsum = vec3(0.0,0.0,0.0);
      
      //sum the multiple light souces
      for (int j = 0; j < 3; j++){
          lightsum += Lrgb[j] * diffuse * max(0., dot(normal, Ldir[j]));
      }   
	    color = ambient + lightsum;
      return color;
   }

   void main(void) {
      vec2 c = uCursor.xy;

      float rand = fract(sin(dot(vec2(vPosition.x,vPosition.y) ,vec2(12.9898,78.233))) * 43758.5453);
      //Create multiple Light souces
      for (int j = 0; j < 3; j++){
        Lrgb[j] = vec3(float(j)/6.+0.3,1.,float(j)/6.+0.3);
        Ldir[j] = normalize(vec3(c.x+float(j)/2.-.5, c.y, 1. - 2. * dot(c, c)));
      }
      vec3 V, W;
      float f = -5.0;
      W = normalize( vec3(vPosition.x, vPosition.y, -f) );
      V = vec3(0.,0.,-0.5);
      material = vec3(0.5, 0.5, 0.25);
      vec3 color = vec3(0., 0., 0.);
      float t_min = 10000.;
      for (int i = 0 ; i < 3 ; i++) {
          sphere = vec4(0.3*sin(uTime+float(i))*cos(uTime+float(i)),0.3*sin(uTime+float(i)),1.5,0.08); //vec4(x,y,z,r)
          float t = raySphere(V, W, sphere);
          if (t<t_min){
             t_min = t;   
             color = shadeSphere(V + t * W, sphere, material);             
          }
       }  
     
      gl_FragColor = vec4(sqrt(color), 1.); // Do Gamma correction.
   }
</script>








<script id='my_vertex_shader3' type='x-shader/x-vertex'>
   attribute vec3 aPosition;
   varying   vec3 vPosition;
   void main() {
      gl_Position = vec4(aPosition, 1.0);
      vPosition = aPosition;
   }
</script>

<script id='my_fragment_shader3' type='x-shader/x-fragment'>


   precision mediump float;
   uniform float uTime;
   uniform vec3  uCursor;
   varying vec3  vPosition;

   vec4 sphere;
   vec3 material;
   float rand;
   vec3 Lrgb[3];
   vec3 Ldir[3];

   // Compute intersection of a ray with a sphere, if any.  Return t.
   // If there is no intersection, return 10000.

   float raySphere(vec3 V, vec3 W, vec4 S) {

      float b = 2.*dot(W, (V-S.xyz));
      float c = dot((V-S.xyz),(V-S.xyz)) - pow(S.w, 2.);
      float bac = pow(b,2.) - 4.*c;
      if (bac <0.){
        return 10000.; 
      }
	    float t = (-b - pow(bac,0.5)) / 2.;
      if (t>0.){
         return t;}
   }

   // Diffusely shade a sphere.
   //    point is the x,y,z position of the surface point.
   //    sphere is the x,y,z,r definition of the sphere.
   //    material is the r,g,b color of the sphere.

   vec3 shadeSphere(vec3 point, vec4 sphere, vec3 material) {
      vec3 color = vec3(0.,0.,0.);
      vec3 normal = (point - sphere.xyz) / sphere.w;
      vec3 ambient = material / 5.;
      vec3 diffuse = vec3(0.4,0.4,0.4);
      vec3 lightsum = vec3(0.0,0.0,0.0);
      
      //sum the multiple light souces
      for (int j = 0; j < 3; j++){
          lightsum += Lrgb[j] * diffuse * max(0., dot(normal, Ldir[j]));
      }   
	    color = ambient + lightsum;
      return color;
   }

   void main(void) {
      vec2 c = uCursor.xy;

      float rand = fract(sin(dot(vec2(vPosition.x,vPosition.y) ,vec2(12.9898,78.233))) * 43758.5453);
      //Create multiple Light souces
      for (int j = 0; j < 3; j++){
        Lrgb[j] = vec3(float(j)/6.+0.3,1.,float(j)/6.+0.3);
        Ldir[j] = normalize(vec3(float(j)-1., 1., 1. - 2. * dot(c, c)));
      }
      vec3 V, W;
      float f = -5.0;
      W = normalize( vec3(vPosition.x, vPosition.y, -f) );
      V = vec3(0.,0.,-0.5);
      material = vec3(0.5, 0.5, 0.25);
      vec3 color = vec3(0., 0., 0.);
      float t_min = 10000.;
      for (int i = 0 ; i < 50 ; i++) {
          sphere = vec4(0.3*sin(float(i)+c.x)*cos(uTime/2.),0.3*cos(uTime/2.)*sin(float(i)+c.y),1.5,0.06*(.5*sin(uTime/2.)+.7)); //vec4(x,y,z,r)
          float t = raySphere(V, W, sphere);
          if (t<t_min){
             t_min = t;   
             color = shadeSphere(V + t * W, sphere, material);             
          }
       }  
     
      gl_FragColor = vec4(sqrt(color), 1.); // Do Gamma correction.
   }

</script>

<script>
start_gl('canvas1', document.getElementById('my_vertex_shader'  ).innerHTML,
                    document.getElementById('my_fragment_shader').innerHTML);
start_gl('canvas2', document.getElementById('my_vertex_shader2'  ).innerHTML,
                    document.getElementById('my_fragment_shader2').innerHTML);
start_gl('canvas3', document.getElementById('my_vertex_shader3'  ).innerHTML,
                    document.getElementById('my_fragment_shader3').innerHTML);
</script>

