<script src=lib1.js></script>


<br>
<br>
<body bgcolor=black>
<center>
<tr><font color="white">Phong model for specular reflection, Shadows and Reflections:</font></tr><br>
<tr><canvas id='canvas1' width=400 height=400></canvas></tr><br>
<br><br><br><br><br><br><br><br><br><br><br><br>
<tr><font color="white">Blinn model for specular reflection, Shadows and Reflections:</font></tr><br>
<tr><canvas id='canvas2' width=400 height=400></canvas></tr><br>
<br><br><br><br><br><br><br><br><br><br><br><br>
<tr><font color="white">Phong Model for specular reflection, Shadows, Reflections, Multiple Spheres and Cursor Iteration:</font></tr><br>
<tr><canvas id='canvas3' width=800 height=800></canvas></tr><br>
<br><br><br><br><br><br><br><br><br><br><br><br>
</center>
</body>






<script id='my_vertex_shader1' type='x-shader/x-vertex'>
   attribute vec3 aPosition;
   varying   vec3 vPosition;
   void main() {
      gl_Position = vec4(aPosition, 1.0);
      vPosition = aPosition;
   }
</script>

<script id='my_fragment_shader1' type='x-shader/x-fragment'>

   precision mediump float;
   uniform float uTime;
   uniform vec3  uCursor;
   varying vec3  vPosition;

   vec4 sphere1;
   vec4 sphere2;
   vec3 material;

   vec3 Lrgb[3];
   vec3 Ldir[3];
   float mode = 1.; //select mode=1. to phong or mode=2. to blinn
   // Compute intersection of a ray with a sphere, if any.  Return t.
   // If there is no intersection, return 10000.


   float raySphere(vec3 V, vec3 W, vec4 s) {
      float b = 2. * dot(V -= s.xyz, W);
      float c = dot(V, V) - s.w * s.w;
      float d = b * b - 4. * c;
      return d < 0. ? 1. / 0. : (-b + sqrt(d)) / 2.;
   }

   // Diffusely shade a sphere.
   //    point is the x,y,z position of the surface point.
   //    sphere is the x,y,z,r definition of the sphere.
   //    material is the r,g,b color of the sphere.

   vec3 shadeSphere(vec3 point, vec4 sphere, vec3 material, vec3 W) {
      vec3 color = vec3(0.,0.,0.);
      vec3 ambient = material / 5.;
      vec3 diffuse = vec3(0.4,0.4,0.4);
      vec3 s = vec3((1.,1.,1.));
      vec3 normal = (point - sphere.xyz) / sphere.w;
      vec3 lightsum = vec3(0.0,0.0,0.0);
      float p;
	  if (mode ==1.){  //phong
          
          p = 10.;      
          //sum the multiple light souces
          for (int j = 0; j < 1; j++){
              vec3 R = 2. * dot(normal, Ldir[j]) * normal - Ldir[j]; //Reflectance
              lightsum += Lrgb[j] * ( diffuse * max(0., dot(normal, Ldir[j])) + s.rgb * pow(max(0., dot(W, R)), p) ) ;
          }   
	      color = ambient + lightsum;
		  //color = ambient + Lrgb * ( diffuse * max(0., dot(normal, Ldir)) + s.rgb * pow(max(0., dot(W, R)), p) ) ; //put the pow inside max 

      }else{  //blinn

          p = 30.;
          //sum the multiple light souces
          for (int j = 0; j < 1; j++){
              vec3 H = normalize(Ldir[j] + W);
              lightsum += Lrgb[j] * ( diffuse * max(0., dot(normal, Ldir[j])) + s.rgb * pow(max(0., dot(normal, H)), p) ) ;
          }   
	      color = ambient + lightsum;
          //color = ambient + Lrgb * ( diffuse * max(0., dot(normal, Ldir)) + s.rgb * pow(max(0., dot(normal, H)), p) ) ; //put the pow inside max 
      }

      return color;
   }

   void main(void) {
      vec2 c = uCursor.xy;

      //Create multiple Light souces
      for (int j = 0; j < 1; j++){
          Lrgb[j] = vec3(float(j)/6.+0.3,1.,float(j)/6.+0.3);
          Ldir[j] = normalize(vec3(float(j)-1., 1., 1. - 2. * dot(c, c)));
      }
      Lrgb[0] = vec3(0.5,0.5,0.5);
      Ldir[0] = normalize(vec3(c.x, c.y, 1. - 2. * dot(c, c)));
      
      vec3 V, W;
      float f = -10.0;
      V = vec3(0.,0.,0.);
      W = normalize( vec3(vPosition.x, vPosition.y, -f) );
      vec4 spheres[3];
      spheres[0] = vec4(.25,.0,5.,.15); //vec4(x,y,z,r)
      spheres[1] = vec4(0.5*c.x,0.5*c.y,5.,.1); //vec4(x,y,z,r)
      spheres[2] = vec4(-.2,.0,5.,.1); //vec4(x,y,z,r)

      vec3 materials[3];
      materials[0] = vec3(0.7,0.0,0.0);
      materials[1] = vec3(0.0,0.7,0.0);
      materials[2] = vec3(0.0,0.0,0.7);
      vec3 color = vec3(0., 0., 0.);

      float vin[2];
      float vout[2];
      for (int i=0; i<3;i++){
          float t = raySphere(V, W, spheres[i]);
          if (t < 10000.){
              //vin[i] = t[0]; //used to do boolean intersection
              //vout[i] = t[1]; //used to do boolean intersection
              vec3 point = V + t * W;
              vec3 Vprime = point + 0.0001;
              vec3 Wprime = Ldir[0];
              vec3 normal = (point - spheres[i].xyz) / spheres[i].w;
              float tprimeMin = 10000.;
              for (int j =0; j<3;j++){
                  if (j!=i){
                      float tprime = raySphere(Vprime, Wprime, spheres[j]);
                      if (tprime <tprimeMin){
                         tprimeMin = tprime;
                      }
                  }
              }
              if (tprimeMin == 10000.){ //if no object is in the way of the ray
                  color = shadeSphere(V + t * W, spheres[i], materials[i], W);
                  
                  //do reflection
                  vec3 colorrfl = vec3(0., 0., 0.);
                  float trflMin = 10000.;
                  float trfl;
                  vec3 Wrfl = 2. * dot(normal, -W) * normal + W;
                  vec3 Vrfl = point + 0.0001;// * Wrfl;    
                  for (int j =0; j<3;j++){
                      if (j!=i){
                           trfl = raySphere(Vrfl, Wrfl, spheres[j]);
                           if (trfl < trflMin){
                               trflMin = trfl;
                               colorrfl = shadeSphere(Vrfl + trflMin * Wrfl, spheres[j], materials[j], Wrfl);
                           }
                      }
                  }
                   
                  color = mix(color, colorrfl, 0.3);
                  
              }
          }
      }
      //do boolean intersection
      //float tin = max(vin[0],vin[1]);
      //float tout = min(vout[0],vout[1]);
      //if (tin >= tout){
      //     color = vec3(0.,0.,0.);
      //}
      gl_FragColor = vec4(sqrt(color), 1.); // Do Gamma correction.
   }
</script>




<script id='my_vertex_shader2' type='x-shader/x-vertex'>
   attribute vec3 aPosition;
   varying   vec3 vPosition;
   void main() {
      gl_Position = vec4(aPosition, 1.0);
      vPosition = aPosition;
   }
</script>

<script id='my_fragment_shader2' type='x-shader/x-fragment'>

   precision mediump float;
   uniform float uTime;
   uniform vec3  uCursor;
   varying vec3  vPosition;

   vec4 sphere1;
   vec4 sphere2;
   vec3 material;

   vec3 Lrgb;
   vec3 Ldir;
   float mode = 2.; //select mode=1. to phong or mode=2. to blinn
   // Compute intersection of a ray with a sphere, if any.  Return t.
   // If there is no intersection, return 10000.


   float raySphere(vec3 V, vec3 W, vec4 s) {
      float b = 2. * dot(V -= s.xyz, W);
      float c = dot(V, V) - s.w * s.w;
      float d = b * b - 4. * c;
      return d < 0. ? 1. / 0. : (-b + sqrt(d)) / 2.;
   }


   // Diffusely shade a sphere.
   //    point is the x,y,z position of the surface point.
   //    sphere is the x,y,z,r definition of the sphere.
   //    material is the r,g,b color of the sphere.

   vec3 shadeSphere(vec3 point, vec4 sphere, vec3 material, vec3 W) {
      vec3 color = vec3(0.,0.,0.);
      vec3 ambient = material / 5.;
      vec3 diffuse = vec3(0.4,0.4,0.4);
      vec3 s = vec3((1.,1.,1.));
      vec3 normal = (point - sphere.xyz) / sphere.w;
      float p;
	  if (mode ==1.){  //phong
          vec3 R = 2. * dot(normal, Ldir) * normal - Ldir; //Reflectance
          p = 10.;
		  color = ambient + Lrgb * ( diffuse * max(0., dot(normal, Ldir)) + s.rgb * pow(max(0., dot(W, R)), p) ) ; //put the pow inside max 
      }else{  //blinn
          vec3 H = normalize(Ldir + W);
          p = 30.;
          color = ambient + Lrgb * ( diffuse * max(0., dot(normal, Ldir)) + s.rgb * pow(max(0., dot(normal, H)), p) ) ; //put the pow inside max 
      }

      return color;
   }

   void main(void) {
      vec2 c = uCursor.xy;

      Lrgb = vec3(0.5,0.5,0.5);
      Ldir = normalize(vec3(c.x, c.y, 1. - 2. * dot(c, c)));
      
      // YOU NEED TO COMPUTE V AND W TO CREATE THE RAY FOR THIS PIXEL,
      // USING vPosition.x AND vPosition.y.
 
      vec3 V, W;
      float f = -10.0;
      W = normalize( vec3(vPosition.x, vPosition.y, -f) );
      V = vec3(0.,0.,0.);
      vec4 spheres[3];
      spheres[0] = vec4(.25,.0,5.,.15); //vec4(x,y,z,r)
      spheres[1] = vec4(0.5*c.x,0.5*c.y,5.,.05); //vec4(x,y,z,r)
      spheres[2] = vec4(-.2,.0,5.,.1); //vec4(x,y,z,r)

      vec3 materials[3];
      materials[0] = vec3(0.7,0.0,0.0);
      materials[1] = vec3(0.0,0.7,0.0);
      materials[2] = vec3(0.0,0.0,0.7);
      vec3 color = vec3(0., 0., 0.);

      float vin[2];
      float vout[2];
      for (int i=0; i<3;i++){
          float t = raySphere(V, W, spheres[i]);
          if (t < 10000.){
              //vin[i] = t[0]; //used to do boolean intersection
              //vout[i] = t[1]; //used to do boolean intersection
              vec3 point = V + t * W;
              vec3 Vprime = point + 0.0001;
              vec3 Wprime = Ldir;
              vec3 normal = (point - spheres[i].xyz) / spheres[i].w;
              float tprimeMin = 10000.;
              for (int j =0; j<3;j++){
                  if (j!=i){
                      float tprime = raySphere(Vprime, Wprime, spheres[j]);
                      if (tprime <tprimeMin){
                         tprimeMin = tprime;
                      }
                  }
              }
              if (tprimeMin == 10000.){ //if no object is in the way of the ray
                  color = shadeSphere(V + t * W, spheres[i], materials[i], W);
                  
                  //do reflection
                  vec3 colorrfl = vec3(0., 0., 0.);
                  float trflMin = 10000.;
                  float trfl;
                  vec3 Wrfl = 2. * dot(normal, -W) * normal + W;
                  vec3 Vrfl = point + 0.0001;// * Wrfl;    
                  for (int j =0; j<3;j++){
                      if (j!=i){
                           trfl = raySphere(Vrfl, Wrfl, spheres[j]);
                           if (trfl < trflMin){
                               trflMin = trfl;
                               colorrfl = shadeSphere(Vrfl + trflMin * Wrfl, spheres[j], materials[j], Wrfl);
                           }
                      }
                  }
                   
                  color = mix(color, colorrfl, 0.3);
                  
              }
          }
      }
      //do boolean intersection
      //float tin = max(vin[0],vin[1]);
      //float tout = min(vout[0],vout[1]);
      //if (tin >= tout){
      //     color = vec3(0.,0.,0.);
      //}
      gl_FragColor = vec4(sqrt(color), 1.); // Do Gamma correction.
   }
</script>




<script id='my_vertex_shader3' type='x-shader/x-vertex'>
   attribute vec3 aPosition;
   varying   vec3 vPosition;
   void main() {
      gl_Position = vec4(aPosition, 1.0);
      vPosition = aPosition;
   }
</script>

<script id='my_fragment_shader3' type='x-shader/x-fragment'>

   precision mediump float;
   uniform float uTime;
   uniform vec3  uCursor;
   varying vec3  vPosition;

   vec4 sphere1;
   vec4 sphere2;
   vec3 material;

   vec3 Lrgb;
   vec3 Ldir;
   float mode = 1.; //select mode=1. to phong or mode=2. to blinn

   float raySphere(vec3 V, vec3 W, vec4 s) {
      float b = 2. * dot(V -= s.xyz, W);
      float c = dot(V, V) - s.w * s.w;
      float d = b * b - 4. * c;
      return d < 0. ? 1. / 0. : (-b + sqrt(d)) / 2.;
   }

   /*vec2 raySphere(vec3 V, vec3 W, vec4 S) {

      // YOU NEED TO COMPUTE t, BY SETTING UP AND THEN SOLVING A QUADRATIC EQUATION.
      float b = 2.*dot(W, (V-S.xyz));
      float c = dot((V-S.xyz),(V-S.xyz)) - pow(S.w, 2.);
      float bac = pow(b,2.) - 4.*c;
      if (bac <0.){
        return vec2(10000.,10000.); 
      }
	  return vec2( ((-b + pow(bac,0.5)) / 2.), ((-b - pow(bac,0.5)) / 2.) );
      
   }*/

   // Diffusely shade a sphere.
   //    point is the x,y,z position of the surface point.
   //    sphere is the x,y,z,r definition of the sphere.
   //    material is the r,g,b color of the sphere.

   vec3 shadeSphere(vec3 point, vec4 sphere, vec3 material, vec3 W) {
      vec3 color = vec3(0.,0.,0.);
      vec3 ambient = material / 5.;
      vec3 diffuse = vec3(0.4,0.4,0.4);
      vec3 s = vec3((1.,1.,1.));
      vec3 normal = (point - sphere.xyz) / sphere.w;
      float p;
	  if (mode ==1.){  //phong
          vec3 R = 2. * dot(normal, Ldir) * normal - Ldir; //Reflectance
          p = 10.;
		  color = ambient + Lrgb * ( diffuse * max(0., dot(normal, Ldir)) + s.rgb * pow(max(0., dot(W, R)), p) ) ; //put the pow inside max 
      }else{  //blinn
          vec3 H = normalize(Ldir + W);
          p = 30.;
          color = ambient + Lrgb * ( diffuse * max(0., dot(normal, Ldir)) + s.rgb * pow(max(0., dot(normal, H)), p) ) ; //put the pow inside max 
      }

      return color;
   }

   void main(void) {
      vec2 c = uCursor.xy;

      Lrgb = vec3(0.5,0.5,0.5);
      Ldir = normalize(vec3(c.x, c.y, 1. - 2. * dot(c, c)));
 
      vec3 V, W;
      float f = -10.0;
      W = normalize( vec3(vPosition.x, vPosition.y, -f) );
      V = vec3(0.,0.,0.);
      vec4 spheres[14];
      vec3 materials[14];
      
      for (int i=0; i<14; i++){
          spheres[i] = vec4(.5*cos(6.28*float(i)/14.)*c.x,.5*sin(6.28*float(i)/14.)*c.y,5.,0.03+.02*sin(float(i)+uTime));
          materials[i] = vec3(cos(float(i)),sin(float(i)),0.0);
      }

      //spheres[0] = vec4(.25,.25,5.,.15); 
      //spheres[1] = vec4(0.5*c.x,0.5*c.y,5.,.05); 
      //spheres[2] = vec4(-.2,.2,5.,.1);

      //materials[0] = vec3(0.7,0.0,0.0);
      //materials[1] = vec3(0.0,0.7,0.0);
      //materials[2] = vec3(0.0,0.0,0.7);
      vec3 color = vec3(0., 0., 0.);

      float vin[14];
      float vout[14];
      for (int i=0; i<14;i++){
          float t = raySphere(V, W, spheres[i]);
          if (t < 10000.){
              //vin[i] = t[0]; //used in the boolean intersection
              //vout[i] = t[1]; //used in the boolean intersection
              vec3 point = V + t * W;
              vec3 Vprime = point + 0.0001;
              vec3 Wprime = Ldir;
              vec3 normal = (point - spheres[i].xyz) / spheres[i].w;
              float tprimeMin = 10000.;
              for (int j =0; j<14;j++){
                  if (j!=i){
                      float tprime = raySphere(Vprime, Wprime, spheres[j]);
                      if (tprime <tprimeMin){
                         tprimeMin = tprime;
                      }
                  }
              }
              if (tprimeMin >= 10000.){ //if no object is in the way of the ray
                  color = shadeSphere(V + t * W, spheres[i], materials[i], W);
                  
                  //do reflection
                  vec3 colorrfl = vec3(0., 0., 0.);
                  float trflMin = 10000.;
                  float trfl;
                  vec3 Wrfl = 2. * dot(normal, -W) * normal + W;
                  vec3 Vrfl = point + 0.0001;// * Wrfl;    
                  for (int j =0; j<14;j++){
                      if (j!=i){
                           trfl = raySphere(Vrfl, Wrfl, spheres[j]);
                           if (trfl < trflMin){
                               trflMin = trfl;
                               colorrfl = shadeSphere(Vrfl + trflMin * Wrfl, spheres[j], materials[j], Wrfl);
                           }
                      }
                  }
                   
                  color = mix(color, colorrfl, 0.3);
                  
              }
          }
      }
      //do boolean intersection
      //float tin = max(vin[0],vin[1]);
      //float tout = min(vout[0],vout[1]);
      //if (tin >= tout){
      //     color = vec3(0.,0.,0.);
      //	}
      gl_FragColor = vec4(sqrt(color), 1.); // Do Gamma correction.
   }
</script>

<script>
start_gl('canvas1', document.getElementById('my_vertex_shader1'  ).innerHTML,
                    document.getElementById('my_fragment_shader1').innerHTML);
start_gl('canvas2', document.getElementById('my_vertex_shader2'  ).innerHTML,
                    document.getElementById('my_fragment_shader2').innerHTML);
start_gl('canvas3', document.getElementById('my_vertex_shader3'  ).innerHTML,
                    document.getElementById('my_fragment_shader3').innerHTML);
</script>

